###
# Global
###

site_title: Yarn
site_description: 빠르고, 믿음직스러우며, 그리고 안전한 의존성 관리.

site_nav_getting_started: 바로 시작하기
site_nav_documentation: 문서
site_nav_blog: 블로그

site_bsd_license: Distributed under BSD License
site_code_of_conduct: Code of Conduct
site_edit_this_page: 이 페이지 수정

guides_prev: 이전
guides_next: 다음
guide_additional_reading: 더 보기

iframe_github_stars: GitHub Stars

###
# Homepage
###

homepage_tagline: 빠르고, 믿음직스러우며, 그리고 안전한 의존성 관리.

homepage_feature_fast_title: 끝내주게 빨라요.
homepage_feature_fast_description: |
  Yarn은 내려받은 모든 패키지를 저장하므로 다시 내려받을 필요 없습니다. 또한, 작업을
  병렬로 처리하여 자원 활용을 극대화하므로 그 어느 때보다 더 빠르게 설치합니다.

homepage_feature_fast_image_alt: Generic placeholder image

homepage_feature_secure_title: 무지 안전해요.
homepage_feature_secure_description: |
  Yarn은 각각 설치된 패키지들을 실행하기 전에 무결성을 확인하기 위해 체크섬을 사용합니다.

homepage_feature_secure_image_alt: Generic placeholder image

homepage_feature_reliable_title: 엄청 믿음직스러워요.
homepage_feature_reliable_description: |
  Yarn은 상세하고 간결한 lockfile과 결정론적 알고리즘을 설치에 이용하여,
  특정 시스템에 적용된 설치가 다른 어느 시스템에서도 똑같이 적용됨을 보장합니다.

homepage_feature_reliable_image_alt: Generic placeholder image

homepage_c2a_text: 무엇을 기다리고 있나요?
homepage_c2a_button: 바로 시작하기
homepage_install_button: Yarn 설치하기

homepage_featurette_offline_title: 오프라인 모드
homepage_featurette_offline_description: |
  만약 이전에 패키지를 설치한 적이 있다면, 인터넷 연결 없이 다시 설치할 수 있습니다.

homepage_featurette_deterministic_title: 결정론적
homepage_featurette_deterministic_description: |
  설치 순서와 상관 없이 모든 장치에서 같은 의존성들을 정확히 같은 방식으로 설치합니다

homepage_featurette_network_performance_title: 네트워크 성능
homepage_featurette_network_performance_description: |
  Yarn은 효율적으로 요청들을 queue에 쌓고 네트워크 활용을 최대화하기 위해
  요청 폭포(본문: request waterfalls)를 금지합니다.
homepage_featurette_npm_and_bower_title: 다중 등록
homepage_featurette_npm_and_bower_description: |
  npm 혹은 bower에 등록된 모든 패키지를 설치할 수 있고 이전과 같은 흐름으로 패키지를 유지할 수 있습니다.

homepage_featurette_network_resillience_title: 네트워크 복원
homepage_featurette_network_resillience_description: |
  한번의 요청 실패로 설치가 취소되지 않습니다. 요청이 성공할때까지 재시도합니다.

homepage_featurette_flat_mode_title: 플랫 모드
homepage_featurette_flat_mode_description: |
  중복되는 패키지 생성을 방지하기 위해 의존하는 패키지의 다른 버전들을 하나의 버전으로 합칩니다.


###
# Titles
###

docs_getting_started_title: 바로 시작하기
docs_getting_started_description: |
  이전에 한번도 패키지 매니저를 사용한 적이 없거나 Yarn을 처음 접하시나요?
  잠깐의 투자로 yarn을 사용해봅시다.

docs_index: 문서
docs_getting_started: 바로 시작하기
docs_install: 설치
docs_usage: 사용

docs_yarn_workflow_title: Yarn의 작업흐름
docs_yarn_workflow_description: |
  어떻게 Yarn을 사용할까요? 생산성을 높이는데 도움을 주는 Yarn 패키지들을 만들고 사용하는
  기본적인 작업흐름들이 있습니다.

docs_yarn_workflow: Yarn의 작업흐름
docs_creating_a_project: 새로운 프로젝트 생성하기
docs_managing_dependencies: 의존성 관리하기
docs_installing_dependencies: 의존성 설치하기
docs_version_control: 버전 제어와 함께 사용하기

docs_cli_title: CLI 명령어
docs_cli_description: |
  패키지 설치, 관리, 퍼블리싱 등을 책임지는 풍부한 명령어들을 이용하여 Yarn을 실행할 수 있습니다.


docs_cli_index: CLI 소개
docs_cli_add: yarn add
docs_cli_add_description: |
  다른 패키지를 사용하고 싶은 경우, 의존성 목록에 그 패키지를 추가해야 합니다.
  `yarn add`을 실행하면 여러분의 프로젝트에서 패키지를 설치합니다.
docs_cli_bin: yarn bin
docs_cli_cache: yarn cache
docs_cli_check: yarn check
docs_cli_clean: yarn clean
docs_cli_config: yarn config
docs_cli_generate_lock_entry: yarn generate-lock-entry
docs_cli_global: yarn global
docs_cli_info: yarn info
docs_cli_init: yarn init
docs_cli_install: yarn install
docs_cli_licenses: yarn licenses
docs_cli_link: yarn link
docs_cli_login: yarn login
docs_cli_logout: yarn logout
docs_cli_ls: yarn ls
docs_cli_outdated: yarn outdated
docs_cli_owner: yarn owner
docs_cli_pack: yarn pack
docs_cli_publish: yarn publish
docs_cli_remove: yarn remove
docs_cli_run: yarn run
docs_cli_self_update: yarn self-update
docs_cli_tag: yarn tag
docs_cli_tag_description: |
  Tags are a way of publishing versions of your package with a label.
  Users of your package can install that instead of a version number.
docs_cli_team: yarn team
docs_cli_test: yarn test
docs_cli_unlink: yarn unlink
docs_cli_upgrade: yarn upgrade
docs_cli_version: yarn version
docs_cli_why: yarn why

docs_migrating_from_npm_title: Migrating from npm client
docs_migrating_from_npm_description: |
  Yarn interops directly with many features of npm, including its package
  metadata format, allowing for a painless migration.

docs_migrating_from_npm: Migrating from npm

docs_creating_a_package_title: Creating a Package
docs_creating_a_package_description: |
  Creating and publishing a yarn package can be done with just a few commands
  and configuration settings, leaving you to focus on your actual code.

docs_creating_a_package: Creating a Package
docs_publishing_a_package: Publishing a Package

docs_dependencies_title: Dependencies & Versions
docs_dependencies_description: |
  Using Yarn you'll be working with dependencies all the time. Let's go through
  the different types and versions of dependencies.

docs_dependencies: Dependencies and versions
docs_dependency_types: Types of dependencies

docs_dependency_versions: Versions of dependencies
docs_dependency_versions_description: |
  Packages in Yarn follow Semantic Versioning, also known as “semver”. When you
  install a new package it will be added with a semver version range.

docs_configuration_title: Configuration
docs_configuration_description: |
  Learn how to use package.json to configure your package and dependencies

docs_configuration_index: Configuration
docs_configuration_package_json: package.json
docs_configuration_yarn_lock: yarn.lock

yarn_organization_title: Yarn Organization
yarn_organization_description: |
  The Yarn organization is a collaboration of many companies and
  individuals dedicated to improving your package management experience.

organization: Organization
code_of_conduct: Code of Conduct
contributing: Contributing
translations: Translations
release_process: Release Process
governance: Governance

users: Yarn Users
compare: Compare Yarn Performance
blog: Blog

users_lead: Meet all the users of Yarn.
users_description: >
  Logos are added by company or project representatives. They may or may not be
  using Yarn on their main properties, but they're definitely using it
  somewhere.
users_add_prompt: Want to add your own company or project?
users_add_pr: Open a pull request
users_add_requirements_image: >
  Logos must be a 500x200px (2.5x1) SVG (preferred) or PNG image optimized with
  svgo, ImageOptim, or another image optimizer.
users_add_requirements_logo: >
  Please use a version of your logo that works well on a white background.

install_intro: >
  Yarn을 사용하기에 앞서, 먼저 yarn을 시스템에 설치해야 합니다.
  Yarn을 설치하는 다양한 방법들이 있습니다:
install_select_platform: 아래에서 플랫폼을 고르세요
install_os_mac: macOS
install_os_windows: Windows
install_os_linux: Linux
install_os_alternatives: 대안들

install_test: "Yarn을 실행해서 제대로 설치되었는지 확인해봅시다:"

install_problems_title: 문제 있으신가요?
install_problems_description: >
  위의 방법들로 Yarn의 설치가 불가능하다면, GitHub에서 열려있는 이슈를 확인하거나 새로운 이슈를 열어주세요.

install_problems_search: 열려있는 이슈 탐색하기
install_problems_new_issue: 새로운 이슈 열기

docs_install_ci: 지속적인 통합
ci_intro: >
  Yarn can easily be used in various continuous integration systems. To speed up
  builds, the Yarn cache directory can be saved across builds.
ci_select_platform: Select the continuous integration system you're using from the options above
ci_appveyor: AppVeyor
ci_circle: CircleCI
ci_codeship: Codeship
ci_travis: Travis
